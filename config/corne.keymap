/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        as_ht: autoshift_hold_tap {
          compatible = "zmk,behavior-hold-tap";
          label = "AUTOSHIFT_HOLD_TAP";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          bindings = <&shifted>, <&kp>;
        };
        
        quest_excl: quest_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUEST_EXCL";
            bindings = <&kp LS(QUESTION)>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        a_umlaut: a_umlaut {
            compatible = "zmk,behavior-mod-morph";
            label = "A_UMLAUT";
            bindings = <&a_lower_umlaut>, <&o_upper_umlaut>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        a_umlaut_on_hold: a_umlaut_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "A_UMLAUT_ON_HOLD";
            bindings = <&a_umlaut>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
        };

        o_umlaut: o_umlaut {
            compatible = "zmk,behavior-mod-morph";
            label = "O_UMLAUT";
            bindings = <&o_lower_umlaut>, <&o_upper_umlaut>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        o_umlaut_on_hold: o_umlaut_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "O_UMLAUT_ON_HOLD";
            bindings = <&o_umlaut>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
        };

        u_umlaut: u_umlaut {
            compatible = "zmk,behavior-mod-morph";
            label = "U_UMLAUT";
            bindings = <&u_lower_umlaut>, <&u_upper_umlaut>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        u_umlaut_on_hold: u_umlaut_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "U_UMLAUT_ON_HOLD";
            bindings = <&u_umlaut>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
        };

        euro_on_hold: euro_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "EURO_ON_HOLD";
            bindings = <&euro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        s_zett_on_hold: s_zett_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "S_ZETT_ON_HOLD";
            bindings = <&s_zett>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        th_quest_excl: th_quest_excl {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_QUEST_EXCL";
            bindings = <&kp>, <&quest_excl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        td_shift: td_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&caps_word>;
        };
    };

    macros {
        shifted: macro_shifted_kp {
          #binding-cells = <1>;
          label = "MACRO_SHIFTED_KP";
          compatible = "zmk,behavior-macro-one-param";
          bindings =
            <&macro_press &kp LSHFT>,
            <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
            <&macro_release &kp LSHFT>;
        };

        as: autoshift {
          compatible = "zmk,behavior-macro-one-param";
          #binding-cells = <1>;
          label = "AUTOSHIFT_KP";
          bindings =
            <&macro_press>,
            <&macro_param_1to1>,
            <&macro_param_1to2>,
            <&as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
            <&macro_pause_for_release>,
            <&macro_release>,
            <&macro_param_1to1>,
            <&macro_param_1to2>,
            <&as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        a_lower_umlaut: a_lower_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp A>;

            label = "A_LOWER_UMLAUT";
        };

        a_upper_umlaut: a_upper_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp RS(A)>;

            label = "A_UPPER_UMLAUT";
        };

        o_lower_umlaut: o_lower_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp O>;

            label = "O_LOWER_UMLAUT";
        };

        o_upper_umlaut: o_upper_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp RS(O)>;

            label = "O_UPPER_UMLAUT";
        };

        u_lower_umlaut: u_lower_umlau {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp U>;

            label = "U_LOWER_UMLAU";
        };

        u_upper_umlaut: u_upper_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp RS(U)>;

            label = "U_UPPER_UMLAUT";
        };

        euro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(AT)>;
            label = "NEW_MACRO";
        };

        s_zett: s_zett {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(S)>;
            label = "S_ZETT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &as Q  &as W  &as F          &as P  &as B          &as J      &as L  &as U          &as Y      &s_zett    &none
&none  &as A  &as R  &as S          &as T  &as G          &as M      &as N  &as E          &as I      &as O      &none
&none  &as Z  &as X  &as C          &as D  &as V          &as K      &as H  &a_umlaut      &u_umlaut  &o_umlaut  &none
                     &mt LCTRL ESC  &mo 2  &lt 3 SPACE    &lt 4 RET  &mo 1  &kp BACKSPACE
            >;
        };

        numbers {
            bindings = <
&none  &none           &kp GRAVE          &kp EXCLAMATION  &kp QUESTION  &none        &none   &kp N6  &kp N7  &kp N8  &kp N9  &none
&none  &kp MINUS       &kp SINGLE_QUOTE   &kp COMMA        &kp DOT       &kp SLASH    &kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &none
&none  &kp UNDERSCORE  &kp DOUBLE_QUOTES  &kp SEMICOLON    &kp COLON     &none        &none   &kp N5  &none   &none   &none   &none
                                          &kp LS(TAB)      &kp TAB       &kp N0       &none   &none   &none
            >;
        };

        symbols {
            bindings = <
&none  &none      &kp PERCENT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &none            &none   &kp LT         &kp GT      &kp EQUAL  &none         &none
&none  &kp CARET  &kp DOLLAR   &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp BACKSLASH    &kp AT  &kp LPAR       &kp RPAR    &kp HASH   &kp ASTERISK  &none
&none  &none      &none        &kp TILDE         &kp PIPE           &none            &none   &kp AMPERSAND  &kp PLUS    &none      &none         &none
                               &none             &none              &none            &none   &none          &kp DELETE
            >;
        };

        nav {
            bindings = <
&none  &kp LG(W)                      &kp LG(LS(T))             &kp LG(T)                  &kp LG(L)                               &none    &none                  &none                  &none                      &kp LG(UP)    &none          &none
&none  &kp LG(LEFT_BRACKET)           &kp LG(LS(LEFT_BRACKET))  &kp LG(LS(RIGHT_BRACKET))  &kp LG(RIGHT_BRACKET)                   &none    &none                  &kp LEFT               &kp DOWN_ARROW             &kp UP_ARROW  &kp RIGHT      &none
&none  &kp LG(LC(LA(LS(BACKSLASH))))  &kp LG(LC(LA(LEFT)))      &kp LG(LC(LA(RIGHT)))      &kp C_AC_DESKTOP_SHOW_ALL_APPLICATIONS  &none    &none                  &kp LA(LEFT_ARROW)     &kp LG(DOWN)               &none         &kp LA(RIGHT)  &none
                                                                &none                      &none                                   &none    &kp LG(LC(LA(LS(T))))  &kp LG(LC(LA(LS(S))))  &kp LG(LC(LA(LS(SPACE))))
            >;
        };

        button {
            bindings = <
&bt BT_SEL 0  &none      &none         &none         &none           &none         &none             &none       &kp C_BRI_DEC  &kp C_BRI_UP  &none       &bt BT_SEL 1
&none         &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &kp LEFT_SHIFT  &caps_word    &kp C_PLAY_PAUSE  &kp C_PREV  &kp C_VOL_DN   &kp C_VOL_UP  &kp C_NEXT  &none
&none         &kp LG(Z)  &kp LG(X)     &kp LG(C)     &kp LG(D)       &kp LG(V)     &none             &none       &none          &none         &none       &none
                                       &none         &none           &none         &none             &none       &none
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
