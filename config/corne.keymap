/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&shifted>, <&kp>;
        };

        a_umlaut_mm: a_umlaut_mm {
            compatible = "zmk,behavior-mod-morph";
            label = "A_UMLAUT_MM";
            bindings = <&a_lower_umlaut>, <&o_upper_umlaut>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        o_umlaut_mm: o_umlaut_mm {
            compatible = "zmk,behavior-mod-morph";
            label = "O_UMLAUT_MM";
            bindings = <&o_lower_umlaut>, <&o_upper_umlaut>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        u_umlaut_mm: u_umlaut_mm {
            compatible = "zmk,behavior-mod-morph";
            label = "U_UMLAUT_MM";
            bindings = <&u_lower_umlaut>, <&u_upper_umlaut>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        th_thin_arrow: th_thin_arrow {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_THIN_ARROW";
            bindings = <&thin_arrow>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        th_fat_arrow: th_fat_arrow {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_FAT_ARROW";
            bindings = <&fat_arrow>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        th_brackets: th_brackets {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_BRACKETS";
            bindings = <&brackets>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        th_paren: th_paren {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_PAREN";
            bindings = <&paren>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        th_square_brackets: th_square_brackets {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_SQUARE_BRACKETS";
            bindings = <&square_brackets>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        th_braces: th_braces {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_BRACES";
            bindings = <&braces>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        my_mt: my_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "MY_MT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        my_lt: my_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "MY_LT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        a_umlaut: a_umlaut {
            compatible = "zmk,behavior-hold-tap";
            label = "A_UMLAUT";
            bindings = <&a_upper_umlaut>, <&a_lower_umlaut>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        u_umlaut: u_umlaut {
            compatible = "zmk,behavior-hold-tap";
            label = "U_UMLAUT";
            bindings = <&u_upper_umlaut>, <&u_lower_umlaut>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        o_umlaut: o_umlaut {
            compatible = "zmk,behavior-hold-tap";
            label = "O_UMLAUT";
            bindings = <&o_upper_umlaut>, <&o_lower_umlaut>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    macros {
        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        a_lower_umlaut: a_lower_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp A>;

            label = "A_LOWER_UMLAUT";
        };

        a_upper_umlaut: a_upper_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp RS(A)>;

            label = "A_UPPER_UMLAUT";
        };

        o_lower_umlaut: o_lower_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp O>;

            label = "O_LOWER_UMLAUT";
        };

        o_upper_umlaut: o_upper_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp RS(O)>;

            label = "O_UPPER_UMLAUT";
        };

        u_lower_umlaut: u_lower_umlau {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp U>;

            label = "U_LOWER_UMLAU";
        };

        u_upper_umlaut: u_upper_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp RS(U)>;

            label = "U_UPPER_UMLAUT";
        };

        euro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(AT)>;
            label = "NEW_MACRO";
        };

        s_zett: s_zett {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(S)>;
            label = "S_ZETT";
        };

        thin_arrow: thin_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "THIN_ARROW";
        };

        fat_arrow: fat_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "FAT_ARROW";
        };

        brackets: brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT &kp LEFT>;
            label = "BRACKETS";
        };

        paren: paren {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
            label = "PAREN";
        };

        square_brackets: square_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "SQUARE_BRACKETS";
        };

        braces: braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RET &kp RET &kp RIGHT_BRACE &kp UP>;
            label = "BRACES";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp LALT   &as Q  &as W  &as F             &as P         &a_umlaut 0 0     &u_umlaut 0 0  &as L         &as U                  &as Y  &s_zett        &kp RALT
&kp LGUI   &as A  &as R  &as S             &as T         &as G             &as M          &as N         &as E                  &as I  &as O          &kp RGUI
&kp LSHFT  &as Z  &as X  &as C             &as D         &as V             &as K          &as H         &as J                  &as B  &o_umlaut 0 0  &kp RSHFT
                         &my_mt ESC LCTRL  &my_lt 3 TAB  &my_lt 2 SPACE    &my_lt 1 RET   &my_lt 4 DEL  &my_mt RGUI BACKSPACE
            >;
        };

        numbers {
            bindings = <
&none  &none           &kp GRAVE          &kp EXCLAMATION  &kp QUESTION  &none        &none   &kp N6  &kp N7  &kp N8  &kp N9  &none
&none  &kp MINUS       &kp SINGLE_QUOTE   &kp COMMA        &kp DOT       &kp SLASH    &kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &none
&none  &kp UNDERSCORE  &kp DOUBLE_QUOTES  &kp SEMICOLON    &kp COLON     &none        &none   &kp N5  &none   &none   &none   &none
                                          &kp LS(TAB)      &kp TAB       &kp N0       &none   &none   &none
            >;
        };

        symbols {
            bindings = <
&none  &none      &kp PERCENT  &th_square_brackets 0 LEFT_BRACKET  &kp RIGHT_BRACKET  &none            &none   &th_brackets 0 LT             &th_thin_arrow 0 GT  &th_fat_arrow 0 EQUAL  &none         &none
&none  &kp CARET  &kp DOLLAR   &th_braces 0 LEFT_BRACE             &kp RIGHT_BRACE    &kp BACKSLASH    &kp AT  &th_paren 0 LEFT_PARENTHESIS  &kp RPAR             &kp HASH               &kp ASTERISK  &none
&none  &none      &none        &kp TILDE                           &kp PIPE           &none            &none   &kp AMPERSAND                 &kp PLUS             &none                  &none         &none
                               &none                               &none              &none            &none   &none                         &none
            >;
        };

        nav {
            bindings = <
&none  &kp LG(LC(LA(LS(BACKSLASH))))  &none         &kp C_BRI_DN                       &kp C_BRI_UP                            &none       &none                  &kp LG(L)              &kp LG(T)                  &kp LG(LS(T))              &kp LG(W)              &none
&none  &kp C_PREV                     &kp C_VOL_DN  &kp C_VOL_UP                       &kp C_NEXT                              &kp C_PP    &none                  &kp LG(LEFT_BRACKET)   &kp LG(LS(LEFT_BRACKET))   &kp LG(LS(RIGHT_BRACKET))  &kp LG(RIGHT_BRACKET)  &none
&none  &none                          &none         &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &kp C_AC_DESKTOP_SHOW_ALL_APPLICATIONS  &none       &none                  &none                  &kp LG(LC(LA(LEFT)))       &kp LG(LC(LA(RIGHT)))      &none                  &none
                                                    &none                              &none                                   &none       &kp LG(LC(LA(LS(T))))  &kp LG(LC(LA(LS(S))))  &kp LG(LC(LA(LS(SPACE))))
            >;
        };

        button {
            bindings = <
&none  &none      &none         &none         &none           &none         &none  &none               &none           &kp LG(UP)    &none          &none
&none  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &kp LEFT_SHIFT  &caps_word    &none  &kp LEFT            &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT      &none
&none  &kp LG(Z)  &kp LG(X)     &kp LG(C)     &kp LG(D)       &kp LG(V)     &none  &kp LA(LEFT_ARROW)  &kp LG(DOWN)    &none         &kp LA(RIGHT)  &none
                                &none         &none           &none         &none  &none               &none
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
