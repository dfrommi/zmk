/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&shifted>, <&kp>;

            flavor = "tap-preferred";
        };

        a_umlaut_mm: a_umlaut_mm {
            compatible = "zmk,behavior-mod-morph";
            label = "A_UMLAUT_MM";
            bindings = <&a_lower_umlaut>, <&o_upper_umlaut>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        o_umlaut_mm: o_umlaut_mm {
            compatible = "zmk,behavior-mod-morph";
            label = "O_UMLAUT_MM";
            bindings = <&o_lower_umlaut>, <&o_upper_umlaut>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        u_umlaut_mm: u_umlaut_mm {
            compatible = "zmk,behavior-mod-morph";
            label = "U_UMLAUT_MM";
            bindings = <&u_lower_umlaut>, <&u_upper_umlaut>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        th_thin_arrow: th_thin_arrow {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_THIN_ARROW";
            bindings = <&thin_arrow>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        th_fat_arrow: th_fat_arrow {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_FAT_ARROW";
            bindings = <&fat_arrow>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        th_brackets: th_brackets {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_BRACKETS";
            bindings = <&brackets>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        th_paren: th_paren {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_PAREN";
            bindings = <&paren>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        th_square_brackets: th_square_brackets {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_SQUARE_BRACKETS";
            bindings = <&square_brackets>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        th_braces: th_braces {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_BRACES";
            bindings = <&braces>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        a_umlaut: a_umlaut {
            compatible = "zmk,behavior-hold-tap";
            label = "A_UMLAUT";
            bindings = <&a_upper_umlaut>, <&a_lower_umlaut>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        u_umlaut: u_umlaut {
            compatible = "zmk,behavior-hold-tap";
            label = "U_UMLAUT";
            bindings = <&u_upper_umlaut>, <&u_lower_umlaut>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        o_umlaut: o_umlaut {
            compatible = "zmk,behavior-hold-tap";
            label = "O_UMLAUT";
            bindings = <&o_upper_umlaut>, <&o_lower_umlaut>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        th_kp_kp: th_kp_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_KP_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        th_kp_sk: th_kp_sk {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_KP_SK";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        th_kp_mo: th_kp_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_KP_MO";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    macros {
        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        a_lower_umlaut: a_lower_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp A>;

            label = "A_LOWER_UMLAUT";
        };

        a_upper_umlaut: a_upper_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp RS(A)>;

            label = "A_UPPER_UMLAUT";
        };

        o_lower_umlaut: o_lower_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp O>;

            label = "O_LOWER_UMLAUT";
        };

        o_upper_umlaut: o_upper_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp RS(O)>;

            label = "O_UPPER_UMLAUT";
        };

        u_lower_umlaut: u_lower_umlau {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp U>;

            label = "U_LOWER_UMLAU";
        };

        u_upper_umlaut: u_upper_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp RS(U)>;

            label = "U_UPPER_UMLAUT";
        };

        euro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(AT)>;
            label = "NEW_MACRO";
        };

        s_zett: s_zett {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(S)>;
            label = "S_ZETT";
        };

        thin_arrow: thin_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "THIN_ARROW";
        };

        fat_arrow: fat_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "FAT_ARROW";
        };

        brackets: brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT &kp LEFT>;
            label = "BRACKETS";
        };

        paren: paren {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
            label = "PAREN";
        };

        square_brackets: square_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "SQUARE_BRACKETS";
        };

        braces: braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RET &kp RET &kp RIGHT_BRACE &kp UP>;
            label = "BRACES";
        };
    };

    combos {
        compatible = "zmk,combos";

        CombN1 {
            bindings = <&kp NUMBER_1>;
            key-positions = <18 19>;
        };

        CombN2 {
            bindings = <&kp NUMBER_2>;
            key-positions = <2 14>;
        };

        CombN3 {
            bindings = <&kp NUMBER_3>;
            key-positions = <3 15>;
        };

        CombN4 {
            bindings = <&kp NUMBER_4>;
            key-positions = <4 16>;
        };

        CombN5 {
            bindings = <&kp NUMBER_5>;
            key-positions = <5 17>;
        };

        CombN6 {
            bindings = <&kp NUMBER_6>;
            key-positions = <6 18>;
        };

        CombN7 {
            bindings = <&kp NUMBER_7>;
            key-positions = <7 19>;
        };

        CombN8 {
            bindings = <&kp NUMBER_8>;
            key-positions = <8 20>;
        };

        CombN9 {
            bindings = <&kp NUMBER_9>;
            key-positions = <9 21>;
        };

        CombN0 {
            bindings = <&kp NUMBER_0>;
            key-positions = <16 17>;
        };

        Combo_LCMD {
            bindings = <&th_kp_sk LCMD LCMD>;
            key-positions = <16 28>;
            layers = <0>;
        };

        Combo_RCMD {
            bindings = <&th_kp_sk RCMD RCMD>;
            key-positions = <19 31>;
            layers = <0>;
        };

        Combo_LOPT {
            bindings = <&th_kp_sk LALT LALT>;
            key-positions = <27 15>;
            layers = <0>;
        };

        Combo_ROPT {
            bindings = <&th_kp_sk RALT RALT>;
            key-positions = <20 32>;
            layers = <0>;
        };

        Combo_LCTRL {
            bindings = <&th_kp_sk LCTRL LCTRL>;
            key-positions = <14 26>;
            layers = <0>;
        };

        Combo_RCTRL {
            bindings = <&th_kp_sk RCTRL RCTRL>;
            key-positions = <21 33>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp LALT   &as Q  &as W  &as F                &as P            &as B                &s_zett          &as L          &as U                &as Y  &o_umlaut 0 0  &kp RALT
&kp LCTRL  &as A  &as R  &as S                &as T            &as G                &as M            &as N          &as E                &as I  &as O          &kp RCTRL
&kp LCMD   &as Z  &as X  &as C                &as D            &as V                &a_umlaut 0 0    &as H          &as J                &as K  &u_umlaut 0 0  &kp RCMD
                         &th_kp_kp LSHFT ESC  &th_kp_mo 3 TAB  &th_kp_mo 2 SPACE    &th_kp_mo 1 RET  &kp BACKSPACE  &th_kp_kp RSHFT DEL
            >;
        };

        layer_7 {
            bindings = <
&none  &th_fat_arrow 0 EQUAL  &kp GRAVE          &kp EXCLAMATION  &kp QUESTION  &kp CARET      &kp DOLLAR    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE             &kp RIGHT_BRACE    &none
&none  &th_kp_kp TILDE MINUS  &kp SINGLE_QUOTE   &kp COMMA        &kp DOT       &kp HASH       &kp ASTERISK  &kp AT                &kp AMPERSAND          &th_kp_kp BACKSLASH SLASH  &kp PIPE           &none
&none  &kp UNDERSCORE         &kp DOUBLE_QUOTES  &kp SEMICOLON    &kp COLON     &kp PERCENT    &kp PLUS      &kp LT                &th_thin_arrow 0 GT    &kp LEFT_BRACKET           &kp RIGHT_BRACKET  &none
                                                 &caps_word       &kp LS(TAB)   &trans         &none         &none                 &none
            >;
        };

        app {
            bindings = <
&bt BT_SEL 0  &as LA(LC(LG(Q)))  &as LA(LC(LG(W)))  &as LA(LC(LG(F)))  &as LA(LC(LG(P)))  &as LA(LC(LG(B)))    &kp LG(L)                     &kp LG(T)             &none                     &kp LG(LS(T))              &kp LG(W)              &none
&none         &as LA(LC(LG(A)))  &as LA(LC(LG(R)))  &as LA(LC(LG(S)))  &as LA(LC(LG(T)))  &as LA(LC(LG(G)))    &kp LA(LC(LG(LEFT_BRACKET)))  &kp LG(LEFT_BRACKET)  &kp LG(LS(LEFT_BRACKET))  &kp LG(LS(RIGHT_BRACKET))  &kp LG(RIGHT_BRACKET)  &kp LA(LC(LG(RIGHT_BRACKET)))
&bt BT_SEL 1  &as LA(LC(LG(Z)))  &as LA(LC(LG(X)))  &as LA(LC(LG(C)))  &as LA(LC(LG(D)))  &as LA(LC(LG(V)))    &kp LA(LC(LG(EQUAL)))         &kp LA(LC(LG(LEFT)))  &kp LA(LC(LG(DOWN)))      &kp LA(LC(LG(UP_ARROW)))   &kp LA(LC(LG(RIGHT)))  &kp LA(LC(LG(MINUS)))
                                                    &none              &none              &none                &kp LS(RET)                   &kp LA(BACKSPACE)     &kp LA(DELETE)
            >;
        };

        button {
            bindings = <
&none  &none  &none      &none      &none  &none        &none  &none               &none           &none         &none          &none
&none  &none  &none      &none      &none  &none        &none  &kp LEFT            &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT      &none
&none  &none  &as LG(X)  &as LG(C)  &none  &as LG(V)    &none  &kp LA(LEFT_ARROW)  &kp LG(DOWN)    &kp LG(UP)    &kp LA(RIGHT)  &none
                         &none      &none  &none        &none  &none               &none
            >;
        };

        numbers {
            bindings = <
&none  &kp TILDE       &kp GRAVE          &kp EXCLAMATION  &kp QUESTION  &kp ASTERISK    &none   &kp N7  &kp N8  &kp N9  &none   &none
&none  &kp MINUS       &kp SINGLE_QUOTE   &kp COMMA        &kp DOT       &kp SLASH       &kp N0  &kp N4  &kp N5  &kp N6  &kp N0  &none
&none  &kp UNDERSCORE  &kp DOUBLE_QUOTES  &kp SEMICOLON    &kp COLON     &kp PLUS        &none   &kp N1  &kp N2  &kp N3  &none   &none
                                          &caps_word       &kp LS(TAB)   &trans          &none   &none   &none
            >;
        };

        symbols {
            bindings = <
&none  &none  &none  &none  &none  &none    &kp HASH       &th_braces 0 LEFT_BRACE       &th_square_brackets 0 LEFT_BRACKET  &th_brackets 0 LT    &kp CARET              &none
&none  &none  &none  &none  &none  &none    &kp AMPS       &th_paren 0 LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS               &kp AT               &th_fat_arrow 0 EQUAL  &kp PERCENT
&none  &none  &none  &none  &none  &none    &kp PIPE       &kp RIGHT_BRACE               &kp RIGHT_BRACKET                   &th_thin_arrow 0 GT  &kp DOLLAR             &none
                     &none  &none  &none    &kp LS(ENTER)  &kp LA(DELETE)                &kp LA(BACKSPACE)
            >;
        };

        system {
            bindings = <
&bt BT_SEL 0  &kp LG(LC(LA(LS(BACKSLASH))))  &none         &kp C_BRI_DN                       &kp C_BRI_UP                            &none       &none  &none  &none  &none  &none  &none
&bt BT_SEL 1  &kp C_PREV                     &kp C_VOL_DN  &kp C_VOL_UP                       &kp C_NEXT                              &kp C_PP    &none  &none  &none  &none  &none  &none
&none         &none                          &none         &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &kp C_AC_DESKTOP_SHOW_ALL_APPLICATIONS  &none       &none  &none  &none  &none  &none  &none
                                                           &none                              &none                                   &none       &none  &none  &none
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans             &trans                              &trans                   &kp HASH                      &kp ASTRK    &trans      &kp AMPS               &kp PERCENT            &trans             &trans               &trans
&trans  &th_brackets 0 LT  &th_square_brackets 0 LEFT_BRACKET  &th_braces 0 LEFT_BRACE  &th_paren 0 LEFT_PARENTHESIS  &kp CARET    &kp DOLLAR  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE        &kp RIGHT_BRACKET  &th_thin_arrow 0 GT  &trans
&trans  &trans             &trans                              &trans                   &trans                        &trans       &trans      &kp AT                 &th_fat_arrow 0 EQUAL  &kp PIPE           &kp BACKSLASH        &trans
                                                               &trans                   &trans                        &trans       &trans      &trans                 &trans
            >;
        };
    };
};
