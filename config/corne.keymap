/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        quest_excl: quest_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUEST_EXCL";
            bindings = <&kp LS(QUESTION)>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        a_umlaut: a_umlaut {
            compatible = "zmk,behavior-mod-morph";
            label = "A_UMLAUT";
            bindings = <&a_lower_umlaut>, <&o_upper_umlaut>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        a_umlaut_on_hold: a_umlaut_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "A_UMLAUT_ON_HOLD";
            bindings = <&a_umlaut>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
        };

        o_umlaut: o_umlaut {
            compatible = "zmk,behavior-mod-morph";
            label = "O_UMLAUT";
            bindings = <&o_lower_umlaut>, <&o_upper_umlaut>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        o_umlaut_on_hold: o_umlaut_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "O_UMLAUT_ON_HOLD";
            bindings = <&o_umlaut>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
        };

        u_umlaut: u_umlaut {
            compatible = "zmk,behavior-mod-morph";
            label = "U_UMLAUT";
            bindings = <&u_lower_umlaut>, <&u_upper_umlaut>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        u_umlaut_on_hold: u_umlaut_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "U_UMLAUT_ON_HOLD";
            bindings = <&u_umlaut>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
        };

        euro_on_hold: euro_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "EURO_ON_HOLD";
            bindings = <&euro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        s_zett_on_hold: s_zett_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "S_ZETT_ON_HOLD";
            bindings = <&s_zett>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        th_quest_excl: th_quest_excl {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_QUEST_EXCL";
            bindings = <&kp>, <&quest_excl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        td_shift: td_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&caps_word>;
        };
    };

    macros {
        a_lower_umlaut: a_lower_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp A>;

            label = "A_LOWER_UMLAUT";
        };

        a_upper_umlaut: a_upper_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp RS(A)>;

            label = "A_UPPER_UMLAUT";
        };

        o_lower_umlaut: o_lower_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp O>;

            label = "O_LOWER_UMLAUT";
        };

        o_upper_umlaut: o_upper_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp RS(O)>;

            label = "O_UPPER_UMLAUT";
        };

        u_lower_umlaut: u_lower_umlau {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp U>;

            label = "U_LOWER_UMLAU";
        };

        u_upper_umlaut: u_upper_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(U)>, <&macro_wait_time 5>, <&kp RS(U)>;

            label = "U_UPPER_UMLAUT";
        };

        euro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(AT)>;
            label = "NEW_MACRO";
        };

        s_zett: s_zett {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(S)>;
            label = "S_ZETT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp LALT  &kp Q                  &kp W  &kp F                &kp P  &kp B          &kp J    &kp L  &u_umlaut_on_hold 0 U  &kp Y       &kp MINUS               &none
&none     &a_umlaut_on_hold 0 A  &kp R  &s_zett_on_hold 0 S  &kp T  &kp G          &kp M    &kp N  &euro_on_hold 0 E      &kp I       &o_umlaut_on_hold 0 O   &kp SQT
&kp LGUI  &mt LSHIFT Z           &kp X  &kp C                &kp D  &kp V          &kp K    &kp H  &comma_semi            &dot_colon  &th_quest_excl RSHFT 0  &none
                                        &mt LCTRL ESC        &mo 1  &lt 3 SPACE    &kp RET  &mo 2  &kp BACKSPACE
            >;
        };

        symbols {
            bindings = <
&trans  &trans     &trans      &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans         &trans         &kp LT     &kp GT      &kp PLUS  &kp EQUAL      &trans
&trans  &kp CARET  &kp DOLLAR  &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp AT_SIGN    &kp AMPERSAND  &kp LPAR   &kp RPAR    &kp HASH  &kp ASTERISK   &none
&trans  &trans     &trans      &trans            &kp PERCENT        &trans         &kp PIPE       &kp SLASH  &kp TILDE   &kp DOT   &kp BACKSLASH  &trans
                               &trans            &trans             &trans         &trans         &trans     &kp DELETE
            >;
        };

        numbers {
            bindings = <
&none  &none           &kp GRAVE          &kp EXCLAMATION  &kp QUESTION  &none     &none   &kp N6  &kp N7  &kp N8  &kp N9  &none
&none  &kp MINUS       &kp SINGLE_QUOTE   &kp COMMA        &kp DOT       &none     &kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &none
&none  &kp UNDERSCORE  &kp DOUBLE_QUOTES  &kp SEMICOLON    &kp COLON     &none     &none   &kp N5  &none   &none   &none   &none
                                          &kp LS(TAB)      &kp TAB       &kp N0    &none   &none   &none
            >;
        };

        nav {
            bindings = <
&none  &none                          &kp LG(LC(LA(LEFT_ARROW)))  &kp LG(LC(LA(RIGHT)))      &none                  &none    &none                  &none                  &none                      &kp LG(UP)    &none          &none
&none  &kp LG(LEFT_BRACKET)           &kp LG(LS(LEFT_BRACKET))    &kp LG(LS(RIGHT_BRACKET))  &kp LG(RIGHT_BRACKET)  &none    &none                  &kp LEFT               &kp DOWN_ARROW             &kp UP_ARROW  &kp RIGHT      &none
&none  &kp LG(LC(LA(LS(BACKSLASH))))  &none                       &none                      &none                  &none    &none                  &kp LA(LEFT_ARROW)     &kp LG(DOWN)               &none         &kp LA(RIGHT)  &none
                                                                  &none                      &none                  &none    &kp LG(LC(LA(LS(T))))  &kp LG(LC(LA(LS(S))))  &kp LG(LC(LA(LS(SPACE))))
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
&kp LSHFT   &trans        &trans        &trans        &trans        &trans          &trans    &trans    &trans    &trans     &trans  &trans
                                        &kp LGUI      &trans        &kp SPACE       &kp RET   &trans    &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };
    };
};
